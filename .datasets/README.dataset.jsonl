{"instruction":"How to install with npm?","output":"```bash\nnpm install @nan0web/ui\n```\n","context":["h1:@nan0web/ui","h2:Installation"],"input":"## Installation\n\n","tags":["@nan0web/ui","Installation"],"proven":"assert-in-@nan0web/ui"}
{"instruction":"How to install with pnpm?","output":"```bash\npnpm add @nan0web/ui\n```\n","context":["h1:@nan0web/ui","h2:Installation"],"input":"## Installation\n\n","tags":["@nan0web/ui","Installation"],"proven":"assert-in-@nan0web/ui"}
{"instruction":"How to install with yarn?","output":"```bash\nyarn add @nan0web/ui\n```\n","context":["h1:@nan0web/ui","h2:Installation"],"input":"## Installation\n\n","tags":["@nan0web/ui","Installation"],"proven":"assert-in-@nan0web/ui"}
{"instruction":"How to create input and output messages?","output":"```js\nimport { InputMessage, OutputMessage } from '@nan0web/ui'\n\nconst input = InputMessage.from({ value: 'Hello User' })\nconst output = OutputMessage.from({ content: ['Welcome to @nan0web/ui'] })\nconsole.info(input.value) // ← Hello User\nconsole.info(output.content[0]) // ← Welcome to @nan0web/ui\n```\n","context":["h1:@nan0web/ui","h2:Concepts & Architecture","h3:Message Flow"],"input":"### Message Flow\n\nUI communication is built around messages:\n\n- **`UIMessage`** – abstract message base class\n- **`InputMessage`** – user input message (value, options)\n- **`OutputMessage`** – system output (content, error, priority)\n\nMessages are simple, serializable data containers. They help build\ndecoupled communication systems between UI components.\n\n","tags":["@nan0web/ui","Concepts & Architecture","Message Flow"],"proven":"assert-in-@nan0web/ui"}
{"instruction":"How to define and validate a UIForm?","output":"```js\nimport { UIForm } from '@nan0web/ui'\n\nconst form = new UIForm({\n\ttitle: \"Contact Form\",\n\tfields: [\n\t\tFormInput.from({ name: \"email\", label: \"Email Address\", type: \"email\", required: true }),\n\t\tFormInput.from({ name: \"message\", label: \"Your Message\", type: \"textarea\", required: true })\n\t],\n\tstate: {\n\t\temail: \"invalid-email\",\n\t\tmessage: \"Hello!\"\n\t}\n})\n\nconst result = form.validate()\nconsole.info(result.isValid) // ← false\nconsole.info(result.errors.email) // ← Invalid email format\n\n```\n","context":["h1:@nan0web/ui","h2:Concepts & Architecture","h3:Forms"],"input":"### Forms\n\n`UIForm` supports field definitions, data management, and schema validation.\nEvery form includes a title, fields, and current state.\n\nField types include:\n\n- `text`\n- `email`\n- `number`\n- `select`\n- `checkbox`\n- `textarea`\n\n","tags":["@nan0web/ui","Concepts & Architecture","Forms"],"proven":"assert-in-@nan0web/ui"}
{"instruction":"How to render the Welcome component?","output":"```js\nimport { Welcome } from '@nan0web/ui'\n\nconst frame = Welcome({ user: { name: \"Alice\" } })\nconst firstLine = frame[0].join(\"\")\nconsole.info(firstLine) // ← Welcome Alice!\n```\n","context":["h1:@nan0web/ui","h2:Concepts & Architecture","h3:Components"],"input":"### Components\n\nComponents render data as frame-ready output.\n\n- `Welcome` – greets user by name\n- `Process` – shows progress bar and time\n\n","tags":["@nan0web/ui","Concepts & Architecture","Components"],"proven":"assert-in-@nan0web/ui"}
{"instruction":"How to render frame with View?","output":"```js\nimport { View } from '@nan0web/ui'\n\nconst view = new View()\nview.render(1)([\"Hello, world\"])\nconsole.info(String(view.frame)) // ← \"\\rHello, world\"\n```\n","context":["h1:@nan0web/ui","h2:Concepts & Architecture","h3:View Manager"],"input":"### View Manager\n\n`View` combines components and renders frames.\n\nEvery view has:\n\n- Locale – formatted text, numbers, currency\n- StdIn / StdOut – input/output streams\n- Frame – output buffer with visual properties\n\n","tags":["@nan0web/ui","Concepts & Architecture","View Manager"],"proven":"assert-in-@nan0web/ui"}
{"instruction":"How to create a Frame with fixed size?","output":"```js\nimport { Frame } from '@nan0web/ui'\n\nconst frame = new Frame({\n\tvalue: [[\"Frame content\"]],\n\twidth: 20,\n\theight: 5,\n\trenderMethod: Frame.RenderMethod.APPEND,\n})\n\nconst rendered = frame.render()\nconsole.info(rendered.includes(\"Frame content\")) // ← true\n```\n","context":["h1:@nan0web/ui","h2:Concepts & Architecture","h3:Frame Rendering"],"input":"### Frame Rendering\n\n`Frame` manages visual rendering with width and height limits.\nUseful for fixed-size terminals or UI blocks.\n\n","tags":["@nan0web/ui","Concepts & Architecture","Frame Rendering"],"proven":"assert-in-@nan0web/ui"}
{"instruction":"How to create a basic user app that greets?","output":"```js\nimport { App, View } from '@nan0web/ui'\n\nconst app = new App.User.App({ name: \"GreetApp\" })\nconst view = new View()\nview.register(\"Welcome\", Welcome)\n\nconst cmd = App.Command.Message.parse(\"welcome --user Bob\")\nconst result = await app.processCommand(cmd, new App.User.UI(app, view))\nconsole.info(String(result)) // ← Welcome Bob!\n```\n","context":["h1:@nan0web/ui","h2:Concepts & Architecture","h3:App Architecture"],"input":"### App Architecture\n\n`App` provides the main application logic.\n\n- Core – minimal UI layer\n- User – user-specific UI commands\n\nEach app registers commands and binds them to UI actions.\n\n","tags":["@nan0web/ui","Concepts & Architecture","App Architecture"],"proven":"assert-in-@nan0web/ui"}
{"instruction":"How to use a User model?","output":"```js\nimport { Model } from '@nan0web/ui'\n\nconst user = new Model.User({ name: \"Charlie\", email: \"charlie@example.com\" })\nconsole.info(user.name) // ← Charlie\nconsole.info(user.email) // ← charlie@example.com\n```\n","context":["h1:@nan0web/ui","h2:Concepts & Architecture","h3:Models"],"input":"### Models\n\nUI models are plain data objects managed by `Model` classes.\n\n- `User` – user data\n\n","tags":["@nan0web/ui","Concepts & Architecture","Models"],"proven":"assert-in-@nan0web/ui"}
{"instruction":"How to test UI components with assertions?","output":"```js\nimport { Welcome, InputMessage } from '@nan0web/ui'\n\nconst output = Welcome({ user: { name: \"Test\" } })\nconst input = InputMessage.from({ value: \"test\" })\nconsole.log(output[0].join(\"\")) // ← Welcome Test!\n```\n","context":["h1:@nan0web/ui","h2:Concepts & Architecture","h3:Testing UI"],"input":"### Testing UI\n\nCore unit-tested to ensure stability in different environments.\n\nAll components, adapters, and models are designed to be testable\nwith minimal setup.\n\n","tags":["@nan0web/ui","Concepts & Architecture","Testing UI"],"proven":"assert-in-@nan0web/ui"}
{"instruction":"How to run the playground?","output":"```bash\n# Clone repository and run playground\ngit clone https://github.com/nan0web/ui.git\ncd ui\nnpm install\nnpm run playground\n```\n","context":["h1:@nan0web/ui","h2:Playground Demos"],"input":"## Playground Demos\n\nThe library includes rich playground demos:\n\n- [Registration Form](./playground/registration.form.js)\n- [Currency Exchange](./playground/currency.exchange.js)\n- [Mobile Top-up](./playground/topup.telephone.js)\n- [Language Selector](./playground/language.form.js)\n\nRun to explore live functionality:\n\n","tags":["@nan0web/ui","Playground Demos"],"proven":"assert-in-@nan0web/ui"}